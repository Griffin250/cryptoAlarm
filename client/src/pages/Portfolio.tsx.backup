import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card'
import { Button } from '../components/ui/button'
import { Badge } from '../components/ui/badge'
import ResponsiveNavbar from '../components/ResponsiveNavbar'
import { useAuth } from '../context/AuthContext'
import AuthModal from '../components/AuthModal'
import { 
  TrendingUp, TrendingDown, ArrowLeft, Plus, Minus,
  DollarSign, Percent, BarChart3, PieChart, Target,
  Calculator, Calendar, Globe, Zap, Star, Bell, User, Settings,
  Wallet, Link2, Shield, Key, CheckCircle, AlertCircle,
  ExternalLink, Copy, Trash2, RefreshCw
} from 'lucide-react'

// Import crypto icons
import BTC_ICON from '/cryptoIcons/BTC.png';
import ETH_ICON from '/cryptoIcons/ETH.png';
import BNB_ICON from '/cryptoIcons/BNB.png';
import SOL_ICON from '/cryptoIcons/SOL.png';
import XRP_ICON from '/cryptoIcons/XRP.png';
import DOGE_ICON from '/cryptoIcons/DOGE.png';
import ADA_ICON from '/cryptoIcons/ADA.png';
import SHIB_ICON from '/cryptoIcons/SHIB.png';
import USDC_ICON from '/cryptoIcons/USDC.png';
import SUI_ICON from '/cryptoIcons/SUI.png';

// Create crypto icon mapping
const CRYPTO_ICONS: Record<string, string> = {
  BTC: BTC_ICON,
  ETH: ETH_ICON,
  BNB: BNB_ICON,
  SOL: SOL_ICON,
  XRP: XRP_ICON,
  DOGE: DOGE_ICON,
  ADA: ADA_ICON,
  SHIB: SHIB_ICON,
  USDC: USDC_ICON,
  SUI: SUI_ICON,
};

interface Holding {
  symbol: string
  name: string
  icon: string
  amount: number
  avgBuyPrice: number
  currentPrice: number
  value: number
  pnl: number
  pnlPercentage: number
  allocation: number
}

interface Portfolio {
  totalValue: number
  totalInvested: number
  totalPnL: number
  pnlPercentage: number
  holdings: Holding[]
}

interface Transaction {
  id: number
  type: 'buy' | 'sell'
  symbol: string
  amount: number
  price: number
  date: string
  total: number
}

interface AssetLocation {
  location: string
  type: string
  assets: Array<{symbol: string; amount: number; value: number}>
  totalValue: number
  percentage: number
  riskLevel: string
  icon: string
}

interface PerformanceMetrics {
  dayChange: number
  dayChangePercent: number
  weekChange: number
  weekChangePercent: number
  monthChange: number
  monthChangePercent: number
  yearChange: number
  yearChangePercent: number
  maxDrawdown: number
  sharpeRatio: number
  volatility: number
  totalTrades: number
  winRate: number
}

// Mock portfolio data
const mockPortfolio: Portfolio = {
  totalValue: 125847.32,
  totalInvested: 98000.00,
  totalPnL: 27847.32,
  pnlPercentage: 28.41,
  holdings: [
    {
      symbol: "BTC",
      name: "Bitcoin",
      icon: "‚Çø",
      amount: 1.2345,
      avgBuyPrice: 45000,
      currentPrice: 67234.56,
      value: 82969.81,
      pnl: 27543.45,
      pnlPercentage: 49.65,
      allocation: 65.94
    },
    {
      symbol: "ETH",
      name: "Ethereum",
      icon: "Œû",
      amount: 8.7654,
      avgBuyPrice: 2800,
      currentPrice: 3456.78,
      value: 30297.92,
      pnl: 5766.60,
      pnlPercentage: 23.53,
      allocation: 24.08
    },
    {
      symbol: "SOL",
      name: "Solana", 
      icon: "‚óé",
      amount: 45.123,
      avgBuyPrice: 180,
      currentPrice: 234.56,
      value: 10585.12,
      pnl: 2460.75,
      pnlPercentage: 30.29,
      allocation: 8.41
    },
    {
      symbol: "ADA",
      name: "Cardano",
      icon: "‚óà", 
      amount: 3500,
      avgBuyPrice: 0.55,
      currentPrice: 0.58,
      value: 2030.00,
      pnl: 105.00,
      pnlPercentage: 5.45,
      allocation: 1.61
    }
  ]
};

const mockTransactions: Transaction[] = [
  { id: 1, type: "buy", symbol: "BTC", amount: 0.5, price: 43000, date: "2024-01-15", total: 21500 },
  { id: 2, type: "buy", symbol: "ETH", amount: 3.2, price: 2750, date: "2024-01-20", total: 8800 },
  { id: 3, type: "sell", symbol: "BTC", amount: 0.1, price: 65000, date: "2024-02-10", total: 6500 },
  { id: 4, type: "buy", symbol: "SOL", amount: 25, price: 185, date: "2024-02-15", total: 4625 }
];

// Performance metrics
const mockPerformanceMetrics: PerformanceMetrics = {
  dayChange: 2847.32,
  dayChangePercent: 2.31,
  weekChange: 8934.21,
  weekChangePercent: 7.64,
  monthChange: 15678.43,
  monthChangePercent: 14.26,
  yearChange: 27847.32,
  yearChangePercent: 28.41,
  maxDrawdown: -12.7,
  sharpeRatio: 1.85,
  volatility: 18.4,
  totalTrades: 47,
  winRate: 72.3
};

// Asset location data
const mockAssetLocations: AssetLocation[] = [
  {
    location: "MetaMask Wallet",
    type: "hot_wallet",
    assets: [
      { symbol: "ETH", amount: 5.2345, value: 18089.76 },
      { symbol: "BTC", amount: 0.3456, value: 23226.45 }
    ],
    totalValue: 41316.21,
    percentage: 32.8,
    riskLevel: "medium",
    icon: "ü¶ä"
  },
  {
    location: "Binance Exchange",
    type: "exchange",
    assets: [
      { symbol: "BTC", amount: 0.7889, value: 53007.36 },
      { symbol: "SOL", amount: 25.123, value: 5892.34 },
      { symbol: "ADA", amount: 2000, value: 1160.00 }
    ],
    totalValue: 60059.70,
    percentage: 47.7,
    riskLevel: "high",
    icon: "üî∂"
  },
  {
    location: "Hardware Wallet",
    type: "cold_wallet",
    assets: [
      { symbol: "BTC", amount: 0.1, value: 6723.45 },
      { symbol: "ETH", amount: 3.5309, value: 12208.16 }
    ],
    totalValue: 18931.61,
    percentage: 15.0,
    riskLevel: "low",
    icon: "üîí"
  },
  {
    location: "DeFi Protocols",
    type: "defi",
    assets: [
      { symbol: "SOL", amount: 20, value: 4693.12 },
      { symbol: "ADA", amount: 1500, value: 870.00 }
    ],
    totalValue: 5563.12,
    percentage: 4.4,
    riskLevel: "high",
    icon: "üåê"
  }
];

// Portfolio performance data (mock historical data)
const mockPerformanceData = [
  { date: "2024-01-01", value: 85000 },
  { date: "2024-01-15", value: 92000 },
  { date: "2024-02-01", value: 98000 },
  { date: "2024-02-15", value: 105000 },
  { date: "2024-03-01", value: 112000 },
  { date: "2024-03-15", value: 118000 },
  { date: "2024-04-01", value: 121000 },
  { date: "2024-04-15", value: 125847 }
];

// Simple Chart Components
const LineChart: React.FC<{data: any[]; title: string; color?: string}> = ({ data, title, color = "#3861FB" }) => {
  const maxValue = Math.max(...data.map(d => d.value));
  const minValue = Math.min(...data.map(d => d.value));
  const range = maxValue - minValue;

  return (
    <div className="w-full h-64 relative">
      <h4 className="text-white font-medium mb-4">{title}</h4>
      <div className="relative h-48 bg-gray-900/30 rounded-lg p-4">
        <svg className="w-full h-full" viewBox="0 0 400 150">
          <defs>
            <linearGradient id={`gradient-${title}`} x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" stopColor={color} stopOpacity="0.3" />
              <stop offset="100%" stopColor={color} stopOpacity="0.05" />
            </linearGradient>
          </defs>
          
          {/* Grid lines */}
          {[0, 1, 2, 3, 4].map(i => (
            <line 
              key={i}
              x1="0" 
              y1={30 * i} 
              x2="400" 
              y2={30 * i} 
              stroke="#374151" 
              strokeWidth="0.5"
              opacity="0.3"
            />
          ))}
          
          {/* Chart line and area */}
          <path
            d={`M ${data.map((point, index) => {
              const x = (index / (data.length - 1)) * 400;
              const y = 150 - ((point.value - minValue) / range) * 120;
              return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;
            }).join(' ')}`}
            fill="none"
            stroke={color}
            strokeWidth="2"
          />
          
          <path
            d={`M ${data.map((point, index) => {
              const x = (index / (data.length - 1)) * 400;
              const y = 150 - ((point.value - minValue) / range) * 120;
              return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;
            }).join(' ')} L 400 150 L 0 150 Z`}
            fill={`url(#gradient-${title})`}
          />
          
          {/* Data points */}
          {data.map((point, index) => {
            const x = (index / (data.length - 1)) * 400;
            const y = 150 - ((point.value - minValue) / range) * 120;
            return (
              <circle
                key={index}
                cx={x}
                cy={y}
                r="3"
                fill={color}
                className="hover:r-4 transition-all"
              />
            );
          })}
        </svg>
        
        {/* Y-axis labels */}
        <div className="absolute left-0 top-0 h-full flex flex-col justify-between text-xs text-gray-400 -ml-12">
          <span>${(maxValue / 1000).toFixed(0)}K</span>
          <span>${((maxValue + minValue) / 2000).toFixed(0)}K</span>
          <span>${(minValue / 1000).toFixed(0)}K</span>
        </div>
      </div>
    </div>
  );
};

const DonutChart: React.FC<{data: any[]; title: string}> = ({ data, title }) => {
  let cumulativePercentage = 0;
  
  return (
    <div className="w-full">
      <h4 className="text-white font-medium mb-4 text-center">{title}</h4>
      <div className="flex items-center justify-center">
        <div className="relative w-48 h-48">
          <svg className="w-full h-full transform -rotate-90" viewBox="0 0 100 100">
            {data.map((item, index) => {
              const startAngle = cumulativePercentage * 360;
              const endAngle = (cumulativePercentage + item.percentage / 100) * 360;
              cumulativePercentage += item.percentage / 100;
              
              const x1 = 50 + 40 * Math.cos((startAngle * Math.PI) / 180);
              const y1 = 50 + 40 * Math.sin((startAngle * Math.PI) / 180);
              const x2 = 50 + 40 * Math.cos((endAngle * Math.PI) / 180);
              const y2 = 50 + 40 * Math.sin((endAngle * Math.PI) / 180);
              
              const largeArcFlag = endAngle - startAngle > 180 ? 1 : 0;
              
              const pathData = [
                `M 50 50`,
                `L ${x1} ${y1}`,
                `A 40 40 0 ${largeArcFlag} 1 ${x2} ${y2}`,
                'Z'
              ].join(' ');
              
              const colors = ['#3861FB', '#16C784', '#EA3943', '#F59E0B', '#8B5CF6'];
              
              return (
                <path
                  key={index}
                  d={pathData}
                  fill={colors[index % colors.length]}
                  opacity="0.8"
                  className="hover:opacity-100 transition-opacity"
                />
              );
            })}
          </svg>
        </div>
      </div>
    </div>
  );
};

const BarChart: React.FC<{data: any[]; title: string; color?: string}> = ({ data, title, color = "#16C784" }) => {
  const maxValue = Math.max(...data.map(d => d.value));
  
  return (
    <div className="w-full">
      <h4 className="text-white font-medium mb-4">{title}</h4>
      <div className="space-y-3">
        {data.map((item, index) => (
          <div key={index} className="flex items-center space-x-3">
            <div className="w-16 text-xs text-gray-400 text-right">{item.name}</div>
            <div className="flex-1 bg-gray-800 rounded-full h-6 relative overflow-hidden">
              <div 
                className="h-full rounded-full transition-all duration-1000 ease-out"
                style={{ 
                  width: `${(item.value / maxValue) * 100}%`,
                  backgroundColor: item.color || color
                }}
              />
              <div className="absolute inset-0 flex items-center justify-center text-xs text-white font-medium">
                {item.percentage}%
              </div>
            </div>
            <div className="w-20 text-xs text-gray-300 text-right">
              ${item.value.toLocaleString()}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

const PortfolioPage: React.FC = () => {
  const [showAuthModal, setShowAuthModal] = useState(false)
  const [activeView, setActiveView] = useState<'overview' | 'holdings' | 'transactions' | 'wallets'>('overview')
  const [sortBy, setSortBy] = useState<'value' | 'pnl' | 'allocation'>('value')
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc')
  const [isRefreshing, setIsRefreshing] = useState(false)
  
  const { user } = useAuth()

  // Mock portfolio data
  const mockPortfolio: Portfolio = {
    totalValue: 125847.32,
    totalInvested: 98000.00,
    totalPnL: 27847.32,
    pnlPercentage: 28.41,
    holdings: [
      {
        symbol: "BTC",
        name: "Bitcoin",
        icon: "‚Çø",
        amount: 1.2345,
        avgBuyPrice: 45000,
        currentPrice: 67234.56,
        value: 82969.81,
        pnl: 27543.45,
        pnlPercentage: 49.65,
        allocation: 65.94
      },
      {
        symbol: "ETH",
        name: "Ethereum", 
        icon: "Œû",
        amount: 8.7654,
        avgBuyPrice: 2800,
        currentPrice: 3456.78,
        value: 30297.92,
        pnl: 5766.60,
        pnlPercentage: 23.53,
        allocation: 24.08
      },
      {
        symbol: "SOL",
        name: "Solana",
        icon: "‚óé", 
        amount: 45.123,
        avgBuyPrice: 180,
        currentPrice: 234.56,
        value: 10585.12,
        pnl: 2460.75,
        pnlPercentage: 30.29,
        allocation: 8.41
      },
      {
        symbol: "ADA",
        name: "Cardano",
        icon: "‚óà",
        amount: 3500,
        avgBuyPrice: 0.55,
        currentPrice: 0.58,
        value: 2030.00,
        pnl: 105.00,
        pnlPercentage: 5.45,
        allocation: 1.61
      }
    ]
  }

  const mockTransactions: Transaction[] = [
    { id: 1, type: "buy", symbol: "BTC", amount: 0.5, price: 43000, date: "2024-01-15", total: 21500 },
    { id: 2, type: "buy", symbol: "ETH", amount: 3.2, price: 2750, date: "2024-01-20", total: 8800 },
    { id: 3, type: "sell", symbol: "BTC", amount: 0.1, price: 65000, date: "2024-02-10", total: 6500 },
    { id: 4, type: "buy", symbol: "SOL", amount: 25, price: 185, date: "2024-02-15", total: 4625 }
  ]

  // Show auth modal if user is not authenticated
  useEffect(() => {
    if (!user) {
      setShowAuthModal(true)
    }
  }, [user])

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-[#0B1426] via-[#0F1837] to-[#1A1B3A]">
        <ResponsiveNavbar 
          title="Portfolio" 
          subtitle="Track your crypto investments" 
        />
        <div className="container mx-auto px-4 py-12">
          <div className="max-w-md mx-auto">
            <Card className="bg-gray-900/50 border-gray-700">
              <CardHeader className="text-center">
                <PieChart className="h-12 w-12 text-[#3861FB] mx-auto mb-4" />
                <CardTitle className="text-white">Sign In Required</CardTitle>
              </CardHeader>
              <CardContent className="text-center space-y-4">
                <p className="text-gray-300">
                  Please sign in to view and manage your crypto portfolio.
                </p>
                <Button 
                  onClick={() => setShowAuthModal(true)}
                  className="w-full bg-[#3861FB] hover:bg-[#2851FB]"
                >
                  Sign In to View Portfolio
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
        <AuthModal 
          isOpen={showAuthModal} 
          onClose={() => setShowAuthModal(false)} 
        />
      </div>
    )
  }

  const formatCurrency = (amount: number): string => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2
    }).format(amount)
  }

  const formatNumber = (num: number, decimals = 4): string => {
    return new Intl.NumberFormat('en-US', {
      minimumFractionDigits: decimals,
      maximumFractionDigits: decimals
    }).format(num)
  }

  const handleRefresh = async () => {
    setIsRefreshing(true)
    // Simulate API call
    setTimeout(() => {
      setIsRefreshing(false)
    }, 2000)
  }

  const sortedHoldings = [...mockPortfolio.holdings].sort((a, b) => {
    const multiplier = sortOrder === 'desc' ? -1 : 1
    switch (sortBy) {
      case 'value':
        return (a.value - b.value) * multiplier
      case 'pnl':
        return (a.pnl - b.pnl) * multiplier
      case 'allocation':
        return (a.allocation - b.allocation) * multiplier
      default:
        return 0
    }
  })

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#0B1426] via-[#0F1837] to-[#1A1B3A]">
      <ResponsiveNavbar 
        title="Portfolio" 
        subtitle="Track your crypto investments" 
        showBackButton={true}
        backUrl="/dashboard"
        actions={[
          <Button
            key="refresh"
            variant="ghost"
            size="sm"
            onClick={handleRefresh}
            className="text-gray-400 hover:text-white hover:bg-gray-800"
            disabled={isRefreshing}
          >
            <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />
          </Button>
        ]}
      />

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-7xl mx-auto space-y-8">
          
          {/* Portfolio Header */}
          <div className="text-center">
            <h1 className="text-3xl font-bold text-white mb-2">Portfolio Overview</h1>
            <p className="text-gray-300">
              Track your crypto investments and performance
            </p>
          </div>

          {/* View Selector */}
          <div className="flex justify-center">
            <div className="bg-gray-900/50 border border-gray-700 rounded-lg p-2 flex">
              {[
                { key: 'overview', label: 'Overview', icon: BarChart3 },
                { key: 'holdings', label: 'Holdings', icon: Wallet },
                { key: 'transactions', label: 'Transactions', icon: Bell }
              ].map(({ key, label, icon: Icon }) => (
                <Button
                  key={key}
                  variant={activeView === key ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setActiveView(key as any)}
                  className={activeView === key 
                    ? "bg-[#3861FB] text-white" 
                    : "text-gray-400 hover:text-white hover:bg-gray-800"
                  }
                >
                  <Icon className="h-4 w-4 mr-2" />
                  {label}
                </Button>
              ))}
            </div>
          </div>

          {/* Portfolio Stats */}
          {activeView === 'overview' && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <Card className="bg-gray-900/50 border-gray-700">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-gray-400 text-sm">Total Value</p>
                      <p className="text-2xl font-bold text-white">
                        {formatCurrency(mockPortfolio.totalValue)}
                      </p>
                    </div>
                    <DollarSign className="h-8 w-8 text-[#3861FB]" />
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gray-900/50 border-gray-700">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-gray-400 text-sm">Total Invested</p>
                      <p className="text-2xl font-bold text-white">
                        {formatCurrency(mockPortfolio.totalInvested)}
                      </p>
                    </div>
                    <Wallet className="h-8 w-8 text-gray-400" />
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gray-900/50 border-gray-700">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-gray-400 text-sm">Total P&L</p>
                      <p className={`text-2xl font-bold ${
                        mockPortfolio.totalPnL >= 0 ? 'text-[#16C784]' : 'text-red-400'
                      }`}>
                        {mockPortfolio.totalPnL >= 0 ? '+' : ''}{formatCurrency(mockPortfolio.totalPnL)}
                      </p>
                    </div>
                    {mockPortfolio.totalPnL >= 0 ? (
                      <TrendingUp className="h-8 w-8 text-[#16C784]" />
                    ) : (
                      <TrendingDown className="h-8 w-8 text-red-400" />
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gray-900/50 border-gray-700">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-gray-400 text-sm">P&L Percentage</p>
                      <p className={`text-2xl font-bold ${
                        mockPortfolio.pnlPercentage >= 0 ? 'text-[#16C784]' : 'text-red-400'
                      }`}>
                        {mockPortfolio.pnlPercentage >= 0 ? '+' : ''}{mockPortfolio.pnlPercentage.toFixed(2)}%
                      </p>
                    </div>
                    <Percent className={`h-8 w-8 ${
                      mockPortfolio.pnlPercentage >= 0 ? 'text-[#16C784]' : 'text-red-400'
                    }`} />
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Holdings View */}
          {activeView === 'holdings' && (
            <Card className="bg-gray-900/50 border-gray-700">
              <CardHeader className="flex flex-row items-center justify-between">
                <CardTitle className="text-white flex items-center">
                  <Wallet className="h-5 w-5 mr-2" />
                  Holdings ({mockPortfolio.holdings.length})
                </CardTitle>
                <div className="flex items-center space-x-2">
                  <select
                    value={sortBy}
                    onChange={(e) => setSortBy(e.target.value as any)}
                    className="bg-gray-800 border border-gray-600 text-white text-sm rounded px-3 py-1"
                  >
                    <option value="value">Sort by Value</option>
                    <option value="pnl">Sort by P&L</option>
                    <option value="allocation">Sort by Allocation</option>
                  </select>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setSortOrder(sortOrder === 'desc' ? 'asc' : 'desc')}
                    className="text-gray-400 hover:text-white"
                  >
                    {sortOrder === 'desc' ? '‚Üì' : '‚Üë'}
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                {sortedHoldings.map((holding) => (
                  <div key={holding.symbol} className="flex items-center justify-between p-4 bg-gray-800/30 rounded-lg border border-gray-700">
                    <div className="flex items-center space-x-4">
                      <div className="w-12 h-12 bg-gray-700 rounded-full flex items-center justify-center text-xl">
                        {holding.icon}
                      </div>
                      <div>
                        <div className="text-white font-semibold">{holding.name}</div>
                        <div className="text-gray-400 text-sm">{holding.symbol}</div>
                        <div className="text-gray-400 text-xs">
                          {formatNumber(holding.amount)} {holding.symbol}
                        </div>
                      </div>
                    </div>
                    
                    <div className="text-right">
                      <div className="text-white font-semibold">
                        {formatCurrency(holding.value)}
                      </div>
                      <div className={`text-sm ${
                        holding.pnl >= 0 ? 'text-[#16C784]' : 'text-red-400'
                      }`}>
                        {holding.pnl >= 0 ? '+' : ''}{formatCurrency(holding.pnl)} 
                        ({holding.pnl >= 0 ? '+' : ''}{holding.pnlPercentage.toFixed(2)}%)
                      </div>
                      <div className="text-gray-400 text-xs">
                        {holding.allocation.toFixed(2)}% of portfolio
                      </div>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          )}

          {/* Transactions View */}
          {activeView === 'transactions' && (
            <Card className="bg-gray-900/50 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center">
                  <Bell className="h-5 w-5 mr-2" />
                  Recent Transactions
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {mockTransactions.map((tx) => (
                  <div key={tx.id} className="flex items-center justify-between p-4 bg-gray-800/30 rounded-lg border border-gray-700">
                    <div className="flex items-center space-x-4">
                      <Badge className={tx.type === 'buy' ? 'bg-[#16C784]/20 text-[#16C784]' : 'bg-red-500/20 text-red-400'}>
                        {tx.type.toUpperCase()}
                      </Badge>
                      <div>
                        <div className="text-white font-semibold">
                          {formatNumber(tx.amount, 4)} {tx.symbol}
                        </div>
                        <div className="text-gray-400 text-sm">
                          @ {formatCurrency(tx.price)}
                        </div>
                      </div>
                    </div>
                    
                    <div className="text-right">
                      <div className="text-white font-semibold">
                        {formatCurrency(tx.total)}
                      </div>
                      <div className="text-gray-400 text-sm">
                        {new Date(tx.date).toLocaleDateString()}
                      </div>
                    </div>
                  </div>
                ))}
                
                {mockTransactions.length === 0 && (
                  <div className="text-center py-8">
                    <p className="text-gray-400">No transactions yet.</p>
                    <p className="text-gray-500 text-sm mt-2">
                      Start by adding your first crypto transaction.
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  )
}

export default PortfolioPage